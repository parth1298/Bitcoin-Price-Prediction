# -*- coding: utf-8 -*-
"""Untitled3 (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gxvVvqf5AdRC4S3TVa6LNOGHTsqzf1os
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv("bitcoin_price_Training - Training.csv")

df.drop(['Date'],1,inplace=True)

df.drop(['Volume'],1,inplace=True)
df.drop(['Market Cap'],1,inplace=True)

df

future_days=7
df['Future Price']=df[['Close']].shift(-future_days)
df=df[['Close','Future Price','Open','High','Low']]

x=np.array(df.drop(['Future Price'],1))
x=x[:len(df)-future_days]

x

x.size

y=np.array(df['Future Price'])
y=y[:-future_days]

y.size

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

df1=np.array(df.drop(['Future Price'],1))[-future_days:]

df1

x_train

import tensorflow as tf

ann=tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=6,activation='relu'))
ann.add(tf.keras.layers.Dense(units=6,activation='relu'))
ann.add(tf.keras.layers.Dense(units=1))

ann.compile(optimizer='adam',loss='mean_squared_error')

ann.fit(x_train,y_train,epochs=500)

y_pred1=ann.predict(x_test)
np.set_printoptions(precision=2)
np.concatenate((y_pred1.reshape(len(y_pred1),1),y_test.reshape(len(y_test),1)),1)

ann_prediction=ann.predict(df1)

ann_prediction

df.tail(future_days)

from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_pred1)
print("R-squared Score:", r2)

from sklearn.linear_model import LinearRegression

regressor=LinearRegression()
regressor.fit(x_train,y_train)

y_pred2=regressor.predict(x_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred2.reshape(len(y_pred2),1),y_test.reshape(len(y_pred2),1)),1))

multiple_linear_regression_prediction=regressor.predict(df1)

multiple_linear_regression_prediction

df.tail(future_days)

from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_pred2)
print("R-squared Score:", r2)

from sklearn.tree import DecisionTreeRegressor
regressor_tree=DecisionTreeRegressor(random_state=0)
regressor_tree.fit(x_train,y_train)

y_pred3=regressor_tree.predict(x_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred3.reshape(len(y_pred2),1),y_test.reshape(len(y_pred2),1)),1))

Decision_tree_prediction=regressor_tree.predict(df1)

Decision_tree_prediction

df.tail(future_days)

from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_pred3)
print("R-squared Score:", r2)

from sklearn.metrics import  mean_absolute_error
mae = mean_absolute_error(y_test, y_pred1)
print("Mean Absolute Error:", mae)

from sklearn.metrics import  mean_absolute_error
mae = mean_absolute_error(y_test, y_pred2)
print("Mean Absolute Error:", mae)

from sklearn.metrics import  mean_absolute_error
mae = mean_absolute_error(y_test, y_pred3)
print("Mean Absolute Error:", mae)

